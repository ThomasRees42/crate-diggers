package com.cratediggers.entity;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Artist entity class maps to database, can be interacted with by an EntityManager object. 
 */
@SuppressWarnings("serial")
@Entity
@NamedQueries({
	//@NamedQuery(name = "Artist.findAll", query = "SELECT a FROM Artist a ORDER BY a.name"),
	@NamedQuery(name = "Artist.findAll", query = "SELECT a FROM Artist a"),
	@NamedQuery(name = "Artist.countAll", query = "SELECT COUNT(*) FROM Artist"),
	@NamedQuery(name = "Artist.findByName", query = "SELECT a FROM Artist a WHERE a.name = :name")
})
@Table(name = "artist", catalog = "prototype")
public class Artist implements java.io.Serializable {

	/**
	 * Id of an artist object
	 * Auto-increments
	 */
	private Integer artistId;
	/**
	 * Name of an artist object
	 */
	private String name;
	/**
	 * Description of an artist object
	 */
	private String description;
	/**
	 * Set of albums in relational database that contain artistId
	 */
	private Set<Album> albums = new HashSet<Album>(0);
	
	/**
	 * Constructs empty artist entity object
	 */
	public Artist() {
	}

	/**
	 * Constructs an artist object without artistId
	 * artistId can be generated by database auto-increment
	 * @param name
	 * @param description
	 */
	public Artist(String name, String description) {
		this.name = name;
		this.description = description;
	}

	/**
	 * Constructs an artist object without artistId and with an album set
	 * artistId can be generated by database auto-increment
	 * @param name
	 * @param description
	 * @param albums
	 */
	public Artist(String name, String description, Set<Album> albums) {
		this.name = name;
		this.description = description;
		this.albums = albums;
	}

	/**
	 * artistId getter method
	 * @return artistId of an artist object
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "artist_id", unique = true, nullable = false)
	public Integer getArtistId() {
		return this.artistId;
	}

	/**
	 * artistId setter method
	 * @param artistId
	 */
	public void setArtistId(Integer artistId) {
		this.artistId = artistId;
	}

	/**
	 * name getter method
	 * @return name of an artist object
	 */
	@Column(name = "name", nullable = false, length = 30)
	public String getName() {
		return this.name;
	}

	/**
	 * name setter method
	 * @param name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * description getter method
	 * @return description of an artist object
	 */
	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	/**
	 * description setter method
	 * @param description
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * albums getter method
	 * retrieves from album table using foreign keys
	 * @return albums of an artist object
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "artist")
	public Set<Album> getAlbums() {
		return this.albums;
	}

	/**
	 * albums setter method
	 * @param albums
	 */
	public void setAlbums(Set<Album> albums) {
		this.albums = albums;
	}

}

package com.cratediggers.entity;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Genre entity class maps to database, can be interacted with by an EntityManager object.
 */
@SuppressWarnings("serial")
@Entity
@NamedQueries({
	//@NamedQuery(name = "Genre.findAll", query = "SELECT g FROM Genre g ORDER BY g.name"),
	@NamedQuery(name = "Genre.findAll", query = "SELECT g FROM Genre g"),
	@NamedQuery(name = "Genre.countAll", query = "SELECT COUNT(*) FROM Genre"),
	@NamedQuery(name = "Genre.findByName", query = "SELECT g FROM Genre g WHERE g.name = :name")
})
@Table(name = "genre", catalog = "prototype")
public class Genre implements java.io.Serializable {

	/**
	 * Id of a genre object
	 * Auto-increments
	 */
	private Integer genreId;
	/**
	 * Name of a genre object
	 */
	private String name;
	/**
	 * Description of a genre object
	 */
	private String description;
	/**
	 * Set of albums in relational database that contain genreId
	 */
	private Set<Album> albums = new HashSet<Album>(0);

	/**
	 * Constructs empty genre entity object
	 */
	public Genre() {
	}

	/**
	 * Constructs a genre object without genreId
	 * genreId can be generated by database auto-increment
	 * @param name
	 * @param description
	 */
	public Genre(String name, String description) {
		this.name = name;
		this.description = description;
	}

	/**
	 * Constructs a genre object without genreId and with an album set
	 * genreId can be generated by database auto-increment
	 * @param name
	 * @param description
	 * @param albums
	 */
	public Genre(String name, String description, Set<Album> albums) {
		this.name = name;
		this.description = description;
		this.albums = albums;
	}

	/**
	 * genreId getter method
	 * @return genreId of a genre object
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "genre_id", unique = true, nullable = false)
	public Integer getGenreId() {
		return this.genreId;
	}

	/**
	 * genreId setter method
	 * @param genreId 
	 */
	public void setGenreId(Integer genreId) {
		this.genreId = genreId;
	}

	/**
	 * name getter method
	 * @return name of a genre object
	 */
	@Column(name = "name", nullable = false, length = 30)
	public String getName() {
		return this.name;
	}

	/**
	 * name setter method
	 * @param name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * description getter method
	 * @return description of a genre object
	 */
	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	/**
	 * description setter method
	 * @param description
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * albums getter method
	 * retrieves from album table using foreign keys
	 * @return albums of a genre object
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "genre")
	public Set<Album> getAlbums() {
		return this.albums;
	}

	/**
	 * albums setter method
	 * @param albums
	 */
	public void setAlbums(Set<Album> albums) {
		this.albums = albums;
	}

}

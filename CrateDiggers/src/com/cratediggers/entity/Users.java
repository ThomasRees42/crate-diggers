package com.cratediggers.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * User entity class maps to database, can be interacted with by an EntityManager object. 
 */
@SuppressWarnings("serial")
@Entity
@NamedQueries({
	//@NamedQuery(name = "Users.findAll", query = "SELECT u FROM Users u ORDER BY u.fullName"),
	@NamedQuery(name = "Users.findAll", query = "SELECT u FROM Users u"),
	@NamedQuery(name = "Users.findByEmail", query = "SELECT u FROM Users u WHERE u.email = :email"),
	@NamedQuery(name = "Users.countAll", query = "SELECT Count(*) FROM Users u"),
	@NamedQuery(name = "Users.checkLogin", query = "SELECT u FROM Users u WHERE u.email = :email AND u.password = :password")
})
@Table(name = "users", catalog = "prototype")
public class Users implements java.io.Serializable {

	/**
	 * Id of user object
	 * Auto Increments
	 */
	private Integer userId;
	/**
	 * Email of user object
	 * Unique
	 */
	private String email;
	/**
	 * Password of user object
	 */
	private String password;
	/**
	 * Full name of user object
	 */
	private String fullName;

	/**
	 * Constructs empty user entity object
	 */
	public Users() {
	}
	
	/**
	 * Constructs a user entity object with all fields
	 * @param userId
	 * @param email
	 * @param fullName
	 * @param password
	 */
	public Users(Integer userId, String email, String fullName, String password) {
		this(email, fullName, password);
		this.userId = userId;
	}

	/**
	 * Constructs a user entity object without userId
	 * userId can be generated by database auto-increment
	 * @param email
	 * @param fullName
	 * @param password
	 */
	public Users(String email, String fullName, String password) {
		this.email = email;
		this.password = password;
		this.fullName = fullName;
	}

	/**
	 * userId getter method
	 * @return userId of a user object
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	/**
	 * userId setter method
	 * @param userId
	 */
	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	/**
	 * email getter method
	 * @return email of a user object
	 */
	@Column(name = "email", nullable = false, length = 30)
	public String getEmail() {
		return this.email;
	}

	/**
	 * email setter method
	 * @param email 
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * password getter method
	 * @return password of a user object
	 */
	@Column(name = "password", nullable = false, length = 16)
	public String getPassword() {
		return this.password;
	}

	/**
	 * password setter method
	 * @param password 
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * fullName getter method
	 * @return fullName of a user object
	 */
	@Column(name = "full_name", nullable = false, length = 30)
	public String getFullName() {
		return this.fullName;
	}

	/**
	 * fullName setter method
	 * @param fullName
	 */
	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

}

package com.cratediggers.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * Review entity class maps to database, can be interacted with by an EntityManager object. 
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "review", catalog = "prototype")
@NamedQueries({
	//@NamedQuery(name = "Review.listAll", query = "SELECT r FROM Review r ORDER BY r.reviewTime DESC"),
	@NamedQuery(name = "Review.listAll", query = "SELECT r FROM Review r"),
	@NamedQuery(name = "Review.countAll", query = "SELECT COUNT(r) FROM Review r"),
	@NamedQuery(name = "Review.findByCustomerAndAlbum", 
		query = "SELECT r FROM Review r WHERE r.customer.customerId =:customerId"
				+ " AND r.album.albumId =:albumId"),
	@NamedQuery(name = "Review.mostFavoredAlbums",
		query = "SELECT r.album, COUNT(r.album.albumId) AS ReviewCount, AVG(r.rating) as AvgRating FROM Review r "
				+ "GROUP BY r.album.albumId HAVING AVG(r.rating) >= 4.0 "
				+ "ORDER BY ReviewCount DESC, AvgRating DESC") 
})
public class Review implements java.io.Serializable {

	/**
	 * Id of a review object.
	 * Auto-increments.
	 */
	private Integer reviewId;
	/**
	 * Album which a review object belongs to (according to foreign key).
	 */
	private Album album;
	/**
	 * Customer which a review object belongs to (according to foreign key).
	 */
	private Customer customer;
	/**
	 * Rating of a review object.
	 */
	private int rating;
	/**
	 * Headline of a review object.
	 */
	private String headline;
	/**
	 * Comment of a review object.
	 */
	private String comment;
	/**
	 * Time at which a review object is made.
	 */
	private Date reviewTime;

	/**
	 * Constructs empty review entity object.
	 */
	public Review() {
	}

	/**
	 * Constructs review entity object without CustomerId.
	 * CustomerId can be generated by database auto-increment.
	 * @param album
	 * @param customer
	 * @param rating
	 * @param headline
	 * @param comment
	 * @param reviewTime
	 */
	public Review(Album album, Customer customer, int rating, String headline, String comment, Date reviewTime) {
		this.album = album;
		this.customer = customer;
		this.rating = rating;
		this.headline = headline;
		this.comment = comment;
		this.reviewTime = reviewTime;
	}

	/**
	 * reviewId getter method.
	 * @return reviewId of a review object
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "review_id", unique = true, nullable = false)
	public Integer getReviewId() {
		return this.reviewId;
	}

	/**
	 * reviewId setter method.
	 * @param reviewId
	 */
	public void setReviewId(Integer reviewId) {
		this.reviewId = reviewId;
	}

	/**
	 * album getter method.
	 * album object retrieved from database according to foreign key.
	 * @return album of a review object
	 */
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "album_id", nullable = false)
	public Album getAlbum() {
		return this.album;
	}

	/**
	 * album setter method
	 * @param album
	 */
	public void setAlbum(Album album) {
		this.album = album;
	}

	/**
	 * customer getter method.
	 * customer object retrieved from database according to foreign key.
	 * @return customer of a review object
	 */
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "customer_id", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	/**
	 * customer setter method.
	 * @param customer
	 */
	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	/**
	 * rating getter method.
	 * @return rating of a review object
	 */
	@Column(name = "rating", nullable = false)
	public int getRating() {
		return this.rating;
	}

	/**
	 * rating setter method.
	 * @param rating
	 */
	public void setRating(int rating) {
		this.rating = rating;
	}

	/**
	 * headline getter method.
	 * @return headline of a review object
	 */
	@Column(name = "headline", nullable = false, length = 128)
	public String getHeadline() {
		return this.headline;
	}

	/**
	 * headline setter method.
	 * @param headline
	 */
	public void setHeadline(String headline) {
		this.headline = headline;
	}

	/**
	 * comment getter method.
	 * @return comment of a review object
	 */
	@Column(name = "comment", nullable = false, length = 500)
	public String getComment() {
		return this.comment;
	}

	/**
	 * comment setter method.
	 * @param comment
	 */
	public void setComment(String comment) {
		this.comment = comment;
	}

	/**
	 * reviewTime getter method.
	 * @return reviewTime of a review object
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "review_time", nullable = false, length = 19)
	public Date getReviewTime() {
		return this.reviewTime;
	}

	/**
	 * reviewTime setter method
	 * @param reviewTime
	 */
	public void setReviewTime(Date reviewTime) {
		this.reviewTime = reviewTime;
	}

	
	/**
	 * Parses rating float value into string that can be used by JSP pages to represent ratings using stars.
	 * "on" denotes a full star, "half" denotes a half star, and "off" denotes no star should be displayed.
	 * @param averageRating of an album object
	 * @return String containing "on", "half" or "off" instructions
	 */
	@Transient
	public String getStars() {
		String result = "";
		
		int numberOfStarsOn = (int) rating;
		
		for (int i = 1; i <= numberOfStarsOn; i++) {
			result += "on,";
		}
		
		for (int j = numberOfStarsOn + 1; j <= 5; j++) {
			result += "off,";
		}
		
		return result.substring(0, result.length() - 1);
	}	
}
